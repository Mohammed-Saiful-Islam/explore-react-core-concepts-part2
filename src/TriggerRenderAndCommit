Trigger, render and commit
Imagine that your components are cooks in th kitchen. In this scenario, React is the waiter who puts in requests from customers and brings them ther orders. This process of requesting and serving UI has three step:
1. Triggering a render (delivering the guest's order to the kitchen)
2. Rendering the component (preparing the order in the kitchen)
3. Committing to the DOM (placing the ordr on the table)

Step:1 Trigger a render
There are two reasons for a component to render:
It's the component's initial render.
The component's (on one of its ancestors) state has been updated.
Initial render
When your app starts, you need to trigger the initial render. It's done by calling createRoot with the target DOM node, and then calling its render method with your component:________________________

Step 2: React renders your components
After you trigger a render, React calls your components to figure out what do display on screen. "Rendering" is React calling your components.
On initial render, React will call the root component.
For subsequent renders, React will call the function component whose state update triggered the render.
This process is recursive: if the updated component returns some other component, React will render that component next, and if that component also returns something, it will render that component next, and so on.

Step 3: React commits changes to the DOM
After rendeing (calling) your components, React will modify the DOM.
For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.
For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.
React only changes the DOM nodes if there's a difference between renders.